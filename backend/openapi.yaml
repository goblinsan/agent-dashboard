openapi: 3.0.3
info:
  title: AI Agent Dashboard API
  version: 0.5.0
  description: >
    API for coordinating agents.
    v0.5.0 adds multi-project support:
      - Project CRUD endpoints (/projects, archive, restore)
      - Per-request project selection via `x-project-id` header (falls back to `default`)
      - All list/create endpoints for tasks, bugs, status updates, and design notes now operate within the selected project context.
    Previous versions included Phase 2 enhancements (bug patch + pagination) and Phase 3/4 features: soft delete + restore endpoints,
    soft-delete aware listing (includeDeleted=1), and status update creation.
servers:
  - url: http://localhost:4000
paths:
  /healthz:
    get:
      summary: Health & uptime
      responses:
        '200':
          description: Health payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessHealthz'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /agents/register:
    post:
      summary: Register a new agent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                role: { type: string }
      responses:
        '200':
          description: Registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAgentRegistration'
        '400':
          description: Validation error (e.g., name missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tasks:
    get:
      summary: List tasks
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [todo, in_progress, blocked, done]
        - in: query
          name: includeDeleted
          schema: { type: string, enum: ['1'] }
          required: false
          description: If set to 1, include soft-deleted tasks in the result
        - $ref: '#/components/parameters/ProjectHeader'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Task list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessTasks'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
    post:
      summary: Create task
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title]
              properties:
                title: { type: string }
                priority: { type: string, enum: [low, medium, high, critical] }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessTask' }
        '400':
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /tasks/{id}/transition:
    post:
      summary: Transition task status
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [newStatus, rationale, expectedVersion]
              properties:
                newStatus: { type: string, enum: [in_progress, blocked, done] }
                rationale: { type: string }
                confidence: { type: number, minimum: 0, maximum: 1 }
                expectedVersion: { type: integer }
      responses:
        '200':
          description: Updated task
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessTask' }
        '400':
          description: Validation / transition error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '409':
          description: Version conflict
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /tasks/{id}:
    delete:
      summary: Soft delete task
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Soft delete result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessSoftDelete' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /tasks/{id}/restore:
    post:
      summary: Restore soft-deleted task
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Restore result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessRestore' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /bugs:
    get:
      summary: List bugs
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: includeDeleted
          schema: { type: string, enum: ['1'] }
          required: false
          description: If set to 1, include soft-deleted bugs
        - $ref: '#/components/parameters/ProjectHeader'
      responses:
        '200':
          description: Bug list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessBugs'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
    post:
      summary: Create bug report
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, severity, reproSteps]
              properties:
                title: { type: string }
                severity: { type: string, enum: [low, medium, high, critical] }
                taskId: { type: string }
                reproSteps:
                  type: array
                  items: { type: string }
                proposedFix: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessBug' }
        '400':
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /bugs/{id}:
    patch:
      summary: Update bug (optimistic concurrency)
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [expectedVersion]
              properties:
                title: { type: string, minLength: 3, maxLength: 120 }
                severity: { type: string, enum: [low, medium, high, critical] }
                proposedFix: { type: string }
                status: { type: string, enum: [open, triaged, in_progress, resolved, closed] }
                reproSteps:
                  type: array
                  items: { type: string }
                  description: Full replacement list of reproduction steps
                expectedVersion: { type: integer, minimum: 1, description: Must match current bug version }
      responses:
        '200':
          description: Updated bug
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessBug' }
        '400':
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '409':
          description: Version conflict
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
    delete:
      summary: Soft delete bug
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Soft delete result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessSoftDelete' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /bugs/{id}/restore:
    post:
      summary: Restore soft-deleted bug
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Restore result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessRestore' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /audit:
    get:
      summary: Recent audit entries
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 200
          description: Max entries to return (<=500)
      responses:
        '200':
          description: Audit log slice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAudit'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /status-updates:
    get:
      summary: List recent status updates
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
          description: Max number of updates (<=200)
        - in: query
          name: taskId
          schema: { type: string }
          description: Optional filter by task id
        - in: query
          name: since
          schema: { type: integer }
          description: Filter to updates with createdAt >= since (epoch ms)
        - in: query
          name: offset
          schema: { type: integer, minimum: 0, default: 0 }
          description: Offset from newest (e.g. 0 newest window, 10 skip 10 newest)
        - $ref: '#/components/parameters/ProjectHeader'
      responses:
        '200':
          description: Status updates list
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessStatusUpdates' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
    post:
      summary: Create status update
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message: { type: string, minLength: 3, maxLength: 500 }
                taskId: { type: string }
      responses:
        '201':
          description: Created status update
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessStatusUpdate' }
        '400':
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /design-notes:
    get:
      summary: List recent design notes
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
          description: Max number of notes (<=200)
        - in: query
          name: offset
          schema: { type: integer, minimum: 0, default: 0 }
          description: Offset from newest (pagination)
        - in: query
          name: includeDeleted
          schema: { type: string, enum: ['1'] }
          description: If set to 1, include soft-deleted design notes
        - $ref: '#/components/parameters/ProjectHeader'
      responses:
        '200':
          description: Design notes list
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessDesignNotes' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
    post:
      summary: Create design note
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
  /projects:
    get:
      summary: List projects
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: includeArchived
          schema: { type: string, enum: ['1'] }
          description: If set to 1, include archived projects
      responses:
        '200':
          description: Project list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessProjects'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
    post:
      summary: Create project
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                id: { type: string, description: Optional custom identifier (alphanumeric, dash, underscore) }
                name: { type: string, minLength: 3, maxLength: 120 }
                description: { type: string, maxLength: 1000 }
      responses:
        '201':
          description: Created project
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessProject' }
        '400':
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /projects/{id}/archive:
    post:
      summary: Archive project
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Archive result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessArchiveProject' }
        '403':
          description: Forbidden (attempt to archive default project)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /projects/{id}/restore:
    post:
      summary: Restore archived project
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Restore result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessRestoreProject' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              type: object
              required: [title, context, decision, consequences]
              properties:
                title: { type: string, minLength: 3, maxLength: 120 }
                context: { type: string, minLength: 10, maxLength: 2000 }
                decision: { type: string, minLength: 5, maxLength: 2000 }
                consequences: { type: string, minLength: 5, maxLength: 2000 }
      responses:
        '201':
          description: Created design note
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessDesignNote' }
        '400':
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /design-notes/{id}:
    delete:
      summary: Soft delete design note
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Soft delete result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessSoftDelete' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /design-notes/{id}/restore:
    post:
      summary: Restore soft-deleted design note
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Restore result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuccessRestore' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    Project:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        archivedAt: { type: integer, nullable: true, description: Epoch ms when archived; omitted/null if active }
      required: [id, name]
    SuccessProject:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Project'
    SuccessProjects:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              type: array
              items: { $ref: '#/components/schemas/Project' }
    ArchiveProjectResult:
      type: object
      properties:
        archived: { type: boolean }
        alreadyArchived: { type: boolean }
    RestoreProjectResult:
      type: object
      properties:
        restored: { type: boolean }
        alreadyActive: { type: boolean }
    SuccessArchiveProject:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ArchiveProjectResult'
    SuccessRestoreProject:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/RestoreProjectResult'
    SuccessEnvelope:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data: { description: Wrapped payload }
      required: [success, data]
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          const: false
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            details: { description: Optional structured details }
          required: [code, message]
      required: [success, error]
    Task:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        status: { type: string, enum: [todo, in_progress, blocked, done] }
        version: { type: integer }
        assignees:
          type: array
          items: { type: string }
        priority: { type: string, enum: [low, medium, high, critical] }
        rationaleLog:
          type: array
          items: { type: string }
        deletedAt: { type: integer, nullable: true, description: Epoch ms when soft-deleted; null/omitted if active }
    BugReport:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        severity: { type: string, enum: [low, medium, high, critical] }
        taskId: { type: string }
        reproSteps:
          type: array
          items: { type: string }
        proposedFix: { type: string }
        createdAt: { type: integer }
        version: { type: integer, description: Incremented on each successful update }
        deletedAt: { type: integer, nullable: true, description: Epoch ms when soft-deleted; null/omitted if active }
    AuditEntry:
      type: object
      properties:
        id: { type: string }
        actor: { type: string }
        entity: { type: string }
        entityId: { type: string }
        action: { type: string }
        at: { type: integer }
        diff: { type: object }
    StatusUpdate:
      type: object
      properties:
        id: { type: string }
        actor: { type: string }
        taskId: { type: string }
        message: { type: string }
        createdAt: { type: integer }
    DesignNote:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        context: { type: string }
        decision: { type: string }
        consequences: { type: string }
        createdAt: { type: integer }
        supersededBy: { type: string }
        actor: { type: string }
        deletedAt: { type: integer, nullable: true, description: Epoch ms when soft-deleted; null/omitted if active }
    SuccessHealthz:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              type: object
              properties:
                status: { type: string }
                version: { type: string }
                uptimeMs: { type: number }
                counts:
                  type: object
                  properties:
                    tasks: { type: integer }
                    agents: { type: integer }
                    bugs: { type: integer }
                timestamp: { type: number }
    SuccessAgentRegistration:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              type: object
              properties:
                id: { type: string }
                apiKey: { type: string }
              required: [id, apiKey]
    SuccessTask:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Task'
    SuccessTasks:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              type: array
              items: { $ref: '#/components/schemas/Task' }
    SuccessBug:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/BugReport'
    SuccessBugs:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              type: array
              items: { $ref: '#/components/schemas/BugReport' }
    SuccessAudit:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              type: array
              items: { $ref: '#/components/schemas/AuditEntry' }
    SuccessStatusUpdate:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/StatusUpdate'
    SuccessStatusUpdates:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              type: array
              items: { $ref: '#/components/schemas/StatusUpdate' }
    SuccessDesignNote:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/DesignNote'
    SuccessDesignNotes:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              type: array
              items: { $ref: '#/components/schemas/DesignNote' }
    SoftDeleteResult:
      type: object
      properties:
        deleted: { type: boolean }
        alreadyDeleted: { type: boolean }
    RestoreResult:
      type: object
      properties:
        restored: { type: boolean }
        alreadyActive: { type: boolean }
    SuccessSoftDelete:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SoftDeleteResult'
    SuccessRestore:
      allOf:
        - $ref: '#/components/schemas/SuccessEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/RestoreResult'
  parameters:
    ProjectHeader:
      name: x-project-id
      in: header
      required: false
      schema:
        type: string
      description: Optional project context (defaults to 'default'). Archived or unknown project ids return 404.
